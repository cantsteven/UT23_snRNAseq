---
title: "ut23_snRNAseq_graphs"
format: html
editor: visual
---

```{r, error = FALSE}
library(tidyverse)
library(Seurat)
library(patchwork)
library(hdf5r) #for reading in h5 files 
library(sctransform) #Dhivya recommends using sctransorm for data transformation 
library(glmGamPoi) #speeds up SCTransform 
library(metap) #For FindConservativemarkers
```

## Creating Initial Cluster Graph

I used this as a resource: https://github.com/hbctraining/scRNA-seq/blob/master/lessons/07_SC_clustering_cells_SCT.md

19 clusters were created via the initial Seurat processing steps and SCTransform

```{r, echo=TRUE}
ut23.norm3 <- readRDS("ut23.norm3.rds")

# Now we can visulize the clusters at several different resolutions (change the number after integrated_snn_res.)
# Assign identity of clusters using SCT_snn_res.XX
Idents(object = ut23.norm3) <- "SCT_snn_res.0.4"

# The plot is changed when you change the code above 
umap_ut23.norm3 <- DimPlot(ut23.norm3,
        reduction = "umap",
        label = TRUE,
        #split.by = "orig.ident", #to include experimental groups
        label.size = 6)

umap_ut23.norm3


```

## **Cluster Quality Control**

### Experimental Group

Segregation of clusters by experimental group. In general most cell clusters should be present in all conditions- we want to avoid condition specific clustering. The clusters look pretty evenly distributed between groups.

```{r, echo=TRUE}
# Segregation of clusters by experimental group  
 n_cells <- FetchData(ut23.norm3, 
                     vars = c("ident", "orig.ident")) %>%
        dplyr::count(ident, orig.ident)

# Barplot of number of cells per cluster by sample
ggplot(n_cells, aes(x=ident, y=n, fill=orig.ident)) +
    geom_bar(position=position_dodge(), stat="identity")

# We can also look at the proportion of cells in each cluster 
ggplot(ut23.norm3@meta.data) +
    geom_bar(aes(x=SCT_snn_res.0.4, fill=orig.ident), position=position_fill()) 

# UMAP of cells in each cluster by sample
DimPlot(ut23.norm3, 
        label = TRUE, 
        split.by = "orig.ident")  + NoLegend()
```

### Cell Cycle Phase

Segregation of clusters by cell cycle phase. Variation due to cell cycle phase was not regressed out during SCTransform. I'm commenting out this graph as it messed up the analysis further down the page for some reason, but there were not major differences in cell cycle phase between the clusters.

```{r, echo=TRUE}
# Explore whether clusters segregate by cell cycle phase

# Load the cell cycle genes 
# cc.genes <- Seurat::cc.genes
# 
# ut23.norm3 <- CellCycleScoring(ut23.norm3, 
#                                s.features = cc.genes$s.genes, 
#                                g2m.features = cc.genes$g2m.genes,
#                                set.ident = TRUE)
# 
# DimPlot(ut23.norm3,
#         label = TRUE, 
#         split.by = "Phase")  + NoLegend()
```

### Segregation by Other Sources of Variation

Here I'm graphing the number of UMIs, genes per cell (nGene), S phase markers (S.Score) and G phase markers (G2M.Score). Nothing looks too out of the ordinary.

```{r, echo=TRUE}
# Determine metrics to plot present in seurat_integrated@meta.data
ut23.norm3[['nUMI']] <- colSums(ut23.norm3@assays$RNA@counts)
ut23.norm3[['nGene']] <- colSums(ut23.norm3@assays$RNA@counts > 0)

# Load the cell cycle gene sets from Seurat
s.genes <- Seurat::cc.genes$s.genes
g2m.genes <- Seurat::cc.genes$g2m.genes

# Perform cell cycle scoring
ut23.norm3 <- CellCycleScoring(ut23.norm3, s.features = s.genes, g2m.features = g2m.genes)

metrics <-  c("nUMI", "nGene", "S.Score", "G2M.Score")

FeaturePlot(ut23.norm3,
            reduction = "umap",
            features = metrics,
            pt.size = 0.4,
            order = TRUE,
            min.cutoff = 'q10',
            label = TRUE)

# Further examining number of genes per cell

# Boxplot of nGene per cluster
ggplot(ut23.norm3@meta.data) +
    geom_boxplot(aes(x=SCT_snn_res.0.4, y=nGene, fill=SCT_snn_res.0.4)) +
    NoLegend()
```

## **Exploring Known Cell Type Markers**

First I went through the list and searched for well known cell type markers, and made guesses about each cell type.

Then I exported the full list of genes for each cluster, copy pasted them into the website enrichr and checked the panglaoDB cell output. I used this to confirm my ideas.

```{r, echo=TRUE}
# # Find markers for every cluster compared to all remaining cells, report only the positive ones
# ut23.markers <- FindAllMarkers(ut23.norm3, only.pos = TRUE)
# ut23.markers %>%
#     group_by(cluster) %>%
#     dplyr::filter(avg_log2FC > 1) %>%
#     slice_head(n = 10) %>%
#     ungroup() -> top10
# 
#Code for exporting gene lists of each cluster
# cluster.output <- ut23.markers %>%
#   filter(cluster == 15) %>%
#   select(gene)
# 
# gene_list <- paste(cluster.output$gene, collapse = "\n")
# 
# cat(gene_list)

# I stored these notes in an excel file saved on box

# Identifying conserved cell markers across experimental groups: 

# cluster_conserved_markers <- FindConservedMarkers(ut23.norm3,
#                               ident.1 = 15,
#                      	      grouping.var = "orig.ident",
#                               only.pos = TRUE,
# 		              logfc.threshold = 0.25)
# 
# cluster_list <- rownames(cluster_conserved_markers)
# 
# gene_list <- paste(cluster_list, collapse = "\n")
# 
# cat(gene_list)


# Adding new cell type names to clusters
new.cluster.ids <- c("Oligodendrocytes", 
                     "Oligodendrocytes", 
                     "Neurons", 
                     "Oligodendrocytes", 
                     "Neurons", 
                     "Oligodendrocyte Precursors",
                     "Microglia", 
                     "Neurons", 
                     "Oligodendrocytes",
                     "Neurons",
                     "Neurons",
                     "Neurons",
                     "Neurons",
                     "Neurons",
                     "Astrocytes",
                     "Unknown",
                     "Neurons",
                     "Unknown",
                     "Neurons",
                     "Microglia/ Macrophages"
                     )
names(new.cluster.ids) <- levels(ut23.norm3)
ut23.norm3 <- RenameIdents(ut23.norm3, new.cluster.ids)

# The plot with new names 
DimPlot(ut23.norm3, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()

```

### **Visualizing microglia markers**

Cluster 6 is CX3CR1, CSF1R, and P2RY12 positive

```{r, echo=TRUE}
FeaturePlot(object = ut23.norm3, 
                        features = c("Cx3cr1", "Csf1r", "P2ry12"),
                         order = TRUE,
                         min.cutoff = 'q10', 
                         label = TRUE,
			                    repel = TRUE)

VlnPlot(ut23.norm3, features = "Cx3cr1", slot = "counts", log = TRUE)

VlnPlot(ut23.norm3, features = "Csf1r", slot = "counts", log = TRUE)

VlnPlot(ut23.norm3, features = "P2ry12", slot = "counts", log = TRUE)

```

### **Distinguishing microglia and macrophages**

Resting microglia are Cd45 (Ptprc) high and Cd11b (Itgam) low

These don't quite separate out microglia (cluster 6) and the cluster that I thought was macrophages (cluster 19) as I would expect, I'm not sure if cluster 19 are macrophages or a microglia subpopulation. If they are the latter it might be a good idea to try to re-cluster so that these clusters are combined, or just combine the two clusters. Cluster 19 has very few cells (see the graphs above with the cell size per cluster) so whatever it is it probably won't make a huge difference in downstream analyses.

```{r, echo=TRUE}
FeaturePlot(object = ut23.norm3, 
                        features = c("Ptprc", "Itgam"),
                         order = TRUE,
                         min.cutoff = 'q10', 
                         label = TRUE,
			                    repel = TRUE)

VlnPlot(ut23.norm3, features = "Ptprc", slot = "counts", log = TRUE)

VlnPlot(ut23.norm3, features = "Itgam", slot = "counts", log = TRUE)
```

### **Visualizing astrocyte markers**

```{r, echo=TRUE}
FeaturePlot(object = ut23.norm3, 
                        features = c("Gfap", "Aqp4", "S100b"),
                         order = TRUE,
                         min.cutoff = 'q10', 
                         label = TRUE,
			                    repel = TRUE)

VlnPlot(ut23.norm3, features = "Gfap", slot = "counts", log = TRUE)

VlnPlot(ut23.norm3, features = "Aqp4", slot = "counts", log = TRUE)

VlnPlot(ut23.norm3, features = "S100b", slot = "counts", log = TRUE)
```

### **Visualizing oligodendrocyte markers**

```{r, echo=TRUE}
FeaturePlot(object = ut23.norm3, 
                        features = c("Mog", "Mbp"),
                         order = TRUE,
                         min.cutoff = 'q10', 
                         label = TRUE,
			                    repel = TRUE)

VlnPlot(ut23.norm3, features = "Mog", slot = "counts", log = TRUE)

VlnPlot(ut23.norm3, features = "Mbp", slot = "counts", log = TRUE)
```

### **Visualizing oligodendrocyte precursor cell markers**

```{r, echo=TRUE}
FeaturePlot(object = ut23.norm3, 
                        features = c("Pdgfra", "Cspg4"),
                         order = TRUE,
                         min.cutoff = 'q10', 
                         label = TRUE,
			                    repel = TRUE)

VlnPlot(ut23.norm3, features = "Pdgfra", slot = "counts", log = TRUE)

VlnPlot(ut23.norm3, features = "Cspg4", slot = "counts", log = TRUE)
```

### **Visualizing neuronal markers**

Rbfox3 is NeuN and a general marker of neurons

Gad1 is a marker of inhibitory neurons

Grin2a is a marker of excitatory neurons

I've been unable to get clean clusters differentiating inhibitory and excitatory neurons so I'm just keeping them all together for now

```{r, echo=TRUE}
FeaturePlot(object = ut23.norm3, 
                        features = c("Rbfox3", "Gad1", "Grin2a"),
                         order = TRUE,
                         min.cutoff = 'q10', 
                         label = TRUE,
			                    repel = TRUE)

VlnPlot(ut23.norm3, features = "Rbfox3", slot = "counts", log = TRUE)

VlnPlot(ut23.norm3, features = "Gad1", slot = "counts", log = TRUE)

VlnPlot(ut23.norm3, features = "Grin2a", slot = "counts", log = TRUE)
```

### 
