---
title: "UT23_snRNAseq"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(Seurat)
library(patchwork)
library(hdf5r) #for reading in h5 files 
library(sctransform) #Dhivya recommends using sctransorm for data transformation 
library(glmGamPoi) #speeds up SCTransform 

```

**Reading in the Data**

A seurat object was created for each h5 file

```{r}
# Aged M. Vaccae Subjects
AM1_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/AM1_filtered_feature_bc_matrix.h5")
AM1_object <- CreateSeuratObject(counts = AM1_counts, project="AM")

AM2_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/AM2_filtered_feature_bc_matrix.h5")
AM2_object <- CreateSeuratObject(counts = AM2_counts, project="AM")

AM3_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/AM3_filtered_feature_bc_matrix.h5")
AM3_object <- CreateSeuratObject(counts = AM3_counts, project="AM")

# Aged Vehicle Subjects 
AV1_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/AV1_filtered_feature_bc_matrix.h5")
AV1_object <- CreateSeuratObject(counts = AV1_counts, project="AV")

AV2_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/AV2_filtered_feature_bc_matrix.h5")
AV2_object <- CreateSeuratObject(counts = AV2_counts, project="AV")

AV3_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/AV3_filtered_feature_bc_matrix.h5")
AV3_object <- CreateSeuratObject(counts = AV3_counts, project="AV")

# Young vehicle subjects
YV1_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/YV1_filtered_feature_bc_matrix.h5")
YV1_object <- CreateSeuratObject(counts = YV1_counts, project="YV")

YV2_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/YV2_filtered_feature_bc_matrix.h5")
YV2_object <- CreateSeuratObject(counts = YV2_counts, project="YV")

YV3_counts <- Read10X_h5("/stor/work/Fonken/UT23_snRNAseq/YV3_filtered_feature_bc_matrix.h5")
YV3_object <- CreateSeuratObject(counts = YV3_counts, project="YV")

# Creating merged object 
ut23.combined<-merge(AM1_object, y=c(AM2_object, AM3_object, AV1_object, AV2_object, AV3_object, YV1_object, YV2_object, YV3_object), add.cell.ids = c("AM1","AM2","AM3","AV1","AV2","AV3","YV1","YV2","YV3"), project = "ut23",  merge.data = TRUE)

# orig.indent is the condition label 
table(ut23.combined$orig.ident)
save(ut23.combined, file="ut23.seurat.merged.Rdata")
savehistory("ut23.seurat.merge.R")
```

**Suerat Pre-Processing**

```{r}
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
# This is identifying mitochondrial genes 
ut23.combined[["percent.mt"]] <- PercentageFeatureSet(ut23.combined, pattern = "^Mt-")

# Visualize QC metrics as a violin plot
VlnPlot(ut23.combined, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

# nFeature_RNA is the number of unique genes (features) in each cell 
# nCount_RNA is the number of RNA molecules detected in each cell
# percent.mt is the percentage of reads that map to mitochondrial genes out of the total reads in each cell 

# Some more plots comparing feature-feature relationships 
plot1 <- FeatureScatter(ut23.combined, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(ut23.combined, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

# subsetting data 
ut23.combined <- subset(ut23.combined, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)

```

**Data Normalization and Clustering**

Helpful tutorial: https://hbctraining.github.io/scRNA-seq_online/lessons/07_SC_clustering_cells_SCT.html

```{r}
# run sctransform for normalization 
ut23.norm <- SCTransform(ut23.combined, vars.to.regress = "percent.mt", verbose = FALSE)

# dimensionality reduction by PCA and UMAP
# PCA analysis
ut23.norm2 <- RunPCA(ut23.norm, verbose = FALSE)

# UMAP takes the top principal components and reduces them further to 2 dimensions 
ut23.norm2 <- RunUMAP(ut23.norm2, dims = 1:30, verbose = FALSE)

# Identifies the nearest neighbors for each cell, creates a NKK graph
# Here you can change the resolution of the graphs
ut23.norm2 <- FindNeighbors(ut23.norm2, dims = 1:30, verbose = FALSE)

# Clusters cells based on their expression profiles, looking at different resolutions 
ut23.norm3 <- FindClusters(ut23.norm2, verbose = FALSE, resolution = c(0.4, 0.6, 0.8, 1.0, 1.4))

# Now we can visulize the clusters at several different resolutions (change the number after integrated_snn_res.)
# Assign identity of clusters using SCT_snn_res.XX
Idents(object = ut23.norm3) <- "SCT_snn_res.0.4"

# The plot is changed when you change the code above 
umap_ut23.norm3 <- DimPlot(ut23.norm3,
        reduction = "umap",
        label = TRUE,
        #split.by = "orig.ident", #to include experimental groups
        label.size = 6)

ggsave(filename = "DimPlot_ut23.norm3.png", plot = umap_ut23.norm3, width = 8, height = 6, dpi = 300)

```

**Segregation of clusters by experimental group**

```{r}
# Segregation of clusters by experimental group  
 n_cells <- FetchData(ut23.norm3, 
                     vars = c("ident", "orig.ident")) %>%
        dplyr::count(ident, orig.ident)

# Barplot of number of cells per cluster by sample
ggplot(n_cells, aes(x=ident, y=n, fill=orig.ident)) +
    geom_bar(position=position_dodge(), stat="identity")

# We can also look at the proportion of cells in each cluster 
ggplot(ut23.norm3@meta.data) +
    geom_bar(aes(x=SCT_snn_res.0.4, fill=orig.ident), position=position_fill()) 

# UMAP of cells in each cluster by sample
DimPlot(ut23.norm3, 
        label = TRUE, 
        split.by = "orig.ident")  + NoLegend()
```

**Segregation of clusters by cell cycle phase**

```{r}
# Explore whether clusters segregate by cell cycle phase

# Load the cell cycle genes 
cc.genes <- Seurat::cc.genes

ut23.norm3 <- CellCycleScoring(ut23.norm3, 
                               s.features = cc.genes$s.genes, 
                               g2m.features = cc.genes$g2m.genes,
                               set.ident = TRUE)

DimPlot(ut23.norm3,
        label = TRUE, 
        split.by = "Phase")  + NoLegend()


```

**Exploring known cell type markers**

First I went through the list and searched for well known cell type markers, and made guesses about each cell type.

Then I exported the full list of genes for each cluster, copy pasted them into the website enrichr and checked the panglaoDB cell output. I used this to confirm my guesses.

```{r}
# find markers for every cluster compared to all remaining cells, report only the positive ones
ut23.markers <- FindAllMarkers(ut23.norm3, only.pos = TRUE)
ut23.markers %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1) %>%
    slice_head(n = 10) %>%
    ungroup() -> top10

DoHeatmap(ut23.norm3, features = top10$gene) + NoLegend()

#Code for exporting gene lists of each cluster 
cluster.output <- ut23.markers %>%
  filter(cluster == 18) %>%
  select(gene) 

gene_list <- paste(cluster.output$gene, collapse = "\n")

cat(gene_list)

```
